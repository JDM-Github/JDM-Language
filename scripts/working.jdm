|> Declaration
jint test = 90;

|> If statement
jif (test + 45) => jint test = 90;   |> 1 LINE IF
jelseif (test) => {
	jif (test) => {
		|> Nested
	}
}
test = 56 + 2 - 34 ** 34; |> ASSIGNMENT

|> While Loop
jwhile (condition) => { |-> Comment Block <-| };

|> For Loop

|> 1 = Start, 45 = Stop, 1 = Step
jfor i => [1, 45, 1] => {}
|> 1 = Start, 45 = Stop
jfor i => 1, 45 => {}
|> 45 = Stop
jfor i => 45 => {}

|> Foreach and more complicated stuff
jforeach i => jreverse => [ 2, 34, "3", 35 ] => {
	jfor j => [1, 3, 4] => {
		jstring testString = "test" + 'test2' + jstring(i);
		jif (testString == 'testtest2') => {
			jmap map = {
				'1' => 1,
				2 => '2',
				testString => 2.0,
			};
			jforeach key, val => map => {
				|> Do Stuff
			}
		}
	}
}

|> LIST NATIVE FUNCTIONS
jlist testList = [2, 0, 4, "test", 4.56, 2];

$logn => "Test Size: " + testList.size();;

testList.sort();
$logn => "Test Sort: " + testList;
$logn => "Test Count 2: " + testList.count(2);
$logn => "Test Search 4: " + testList.search(4);

testList.insert("I will be inserted", 2);
$logn => "Insert: " + testList;

testList.delete(0);
$logn => "Delete: " + testList;
$logn => "At: " + testList.at(3);

testList.reverse();
$logn => "Reverse: " + testList;

testList.push_back("in back");
$logn => "Push Back: " + testList;

testList.push_front("in front");
$logn => "Push Front: " + testList;

testList.pop_back();
$logn => "Pop Back: " + testList;

testList.pop_front();
$logn => "Pop Front: " + testList;

jstring test = "Hello, World";
$logn => "Size   : " + test.size();
$logn => "Replace: " + test.rreplace("o", "oo");
$logn => "Concat : " + test.rconcat("!");
$logn => "Upper  : " + test.rupper();
$logn => "Lower  : " + test.rlower();
$logn => "Reverse: " + test.rreverse();
$logn => "Compare: " + test.compare("Hello, World");
$logn => "Substr : " + test.rsubstr(7, 5);
$logn => "Find   : " + test.find("llo");
$logn => "Count  : " + test.count("o");
$logn => "Empty  : " + test.empty();
$logn => "StartsW: " + test.startsw("Hello");
$logn => "EndsW  : " + test.endsw("World");
$logn => "Insert : " + test.rinsert(7, "JD's ");
$logn => "Erase  : " + test.rerase(7, 5);
$logn => "Trim   : " + test.rtrim(2, 2);
$logn => "Token  : " + test.tokenize("\\s+|,\\s*");


|> TEST NATIVE FUNCTIONS
jfunc testFilterFunction( arg )        => jreturn arg % 2 == 0;
jfunc testReduceFunction( arg1, arg2 ) => jreturn arg1 + arg2;
jfunc testSortIfFunction( arg1, arg2 ) => jreturn arg1 < arg2;
jfunc testMapFunction   ( arg )        => jreturn arg ** 2;

jlist testList = [1, 2, 3, 4, 5];
$logn
	=> "input    : " => input    ("Test Input: ")
	=> "split    : " => split    ("Test-Split", "-")
	=> "len      : " => len      (testList)
	=> "abs      : " => abs      (-436)
	=> "ceil     : " => ceil     (34.3)
	=> "floor    : " => floor    (34.3)
	=> "max      : " => max      (testList)
	=> "min      : " => min      (testList)
	=> "reverse  : " => reverse  (testList)
	=> "round    : " => round    (34.76)
	=> "sum      : " => sum      (testList)
	=> "join     : " => join     (testList, " -> ")
	=> "index    : " => index    (testList, 4)
	=> "randint  : " => randint  (100, 200)
	=> "randfloat: " => randfloat(10.0, 20.0)
	=> "filter   : " => filter   (testList, testFilterFunction)
	=> "reduce   : " => reduce   (testList, testReduceFunction)
	=> "sort_if  : " => sort_if  (testList, testSortIfFunction)
	=> "map      : " => map      (testList, testMapFunction   )
	=> "chain    : " => chain    (testList, testList, testList)
;

|> Testing 
jlist testList = ["TESDT", 0, 4, "test", 4.56, 2];
jmap  testMap  = {1 => "Hello", 2 => "World", 1 => "TEST"};

jforeach k, v => testMap => {
	$log => "Key: " => k => ", Value: " => v;
}
jforeach k, v => testList => {
	$log => "Key: " => k => ", Value: " => v;
}
jforeach k => testMap => {
	$log => "Key: " => k;
}
jforeach v => testList => {
	$log => "Value: " => v;
}

jforeach k, v => jreverse => testList => {
	$log => "Key: " => k => ", Value: " => v;
}
jforeach v => jreverse => testList => {
	$log => "Value: " => v;
}
