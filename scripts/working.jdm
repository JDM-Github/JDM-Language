|> WORKING

|> Declaration
jint test = 90;


|> If statement
jif (test + 45) => jint test = 90;   |> 1 LINE IF
jelseif (test) => {
	jif (test) => {
		|> Nested
	}
}
test = 56 + 2 - 34 ** 34; |> ASSIGNMENT

|> While Loop
jwhile (condition) => { |-> Comment Block <-| };

|> For Loop

|> 1 = Start, 45 = Stop, 1 = Step
jfor i => [1, 45, 1] => {}
|> 1 = Start, 45 = Stop
jfor i => 1, 45 => {}
|> 45 = Stop
jfor i => 45 => {}

|> Foreach and more complicated stuff
jforeach i => jreverse => [ 2, 34, "3", 35 ] => {
	jfor j => [1, 3, 4] => {
		jstring testString = "test" + 'test2';
		jif (testString == 'testtest2') => {
			jmap map = {
				'1'        => 1,
				2          => '2',
				testString => 2.0,
			};
			jforeach key, val => map => {
			}
		}
	}
}

|> LIST NATIVE FUNCTIONS
jlist testList = [2, 0, 4, "test", 4.56];

$log => "Test Size: ";
$logn => testList.size();

testList.sort();
$log => "Test Sort: ";
$logn => testList;

$log => "Test Search 4: ";
$logn => testList.search(4);

testList.insert("in Index 2", 2);
$log => "Test Insert (2): ";
$logn => testList;

testList.delete(0);
$log => "Test Delete (0): ";
$logn => testList;

$log => "Test At: ";
$logn => testList.at(3);

testList.reverse();
$log => "Test Reverse: ";
$logn => testList;

testList.push_back("in back");
$log => "Test Push Back: ";
$logn => testList;

testList.push_front("in front");
$log => "Test Push Front: ";
$logn => testList;

testList.pop_back();
$log => "Test Pop Back: ";
$logn => testList;

testList.pop_front();
$log => "Test Pop Front: ";
$logn => testList;


|> TEST NATIVE FUNCTIONS
jfunc testFilterFunction( arg ) =>
	jreturn arg % 2 == 0;

jfunc testReduceFunction( arg1, arg2) =>
	jreturn arg1 + arg2;

jfunc testSortIfFunction( arg1, arg2 ) =>
	jreturn arg1 < arg2;

jfunc testMapFunction( arg ) =>
	jreturn arg ** 2;

jlist testList = [1, 2, 3, 4, 5];
$logn
	=> input    ("Test Input: ")
	=> len      (testList)
	=> abs      (-436)
	=> ceil     (34.3)
	=> floor    (34.3)
	=> max      (testList)
	=> min      (testList)
	=> reverse  (testList)
	=> round    (34.76)
	=> sum      (testList)
	=> join     (testList, " -> ")
	=> index    (testList, 4)
	=> randint  (100, 200)
	=> randfloat(10.0, 20.0)
	=> filter   (testList, testFilterFunction)
	=> reduce   (testList, testReduceFunction)
	=> sort_if  (testList, testSortIfFunction)
	=> map      (testList, testMapFunction   )
	=> chain    (testList, testList, testList)
;
