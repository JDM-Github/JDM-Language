
|->
TODO:

jany test = [89, 45];
jlist list = [
	1, 2, 3, 4, '5', 6.4
];

jmap map = {
	"34" => 34,
	"34" => 34,
	"34" => 34,
	"34" => 34,
};

<-|


|->
WORKING
jif (test + 45) => jint test = 90;   |> 1 LINE IF
jelseif (test) => {
	jif (test) => {
		|> Nested
	}
}
test = 56 + 2 - 34 ** 34; |> ASSIGNMENT
jwhile (condition) => { ... };

|> 1 = Start, 45 = Stop, 1 = Step
jfor i => [1, 45, 1] => { ... }
|> 1 = Start, 45 = Stop
jfor i => 1, 45 => { ... }
|> 45 = Stop
jfor i => 45 => { ... }

<-|





jforeach i => jreverse => [ 2, 34, "3", 35 ] => {
	jfor j => [1, 3, 4] => {
		jstring testString = "test" + 'test2';
		jif (testString == 'testtest2') => {
			jmap map = {
				'1'        => 1,
				2          => '2',
				testString => 2.0,
			};
			jforeach key, val => map => {
			}
		}
	}
}

|->
TODO:

lambda on parameters

lambda(() => {}) + 34

Function call on parameters
func() + 45

List on parameters

Either variable or
[] = automatically means list
{} = automatically means map

|> jforeach i    => jreverse => list => {  };
|> jforeach i, j => jreverse => map  => {  };

jfunc test() {
	jfor i => [1, 45, 1] => {
		$log => "TEST";
		jif (something) => {
			jtrue;
			jbreak;
		}
	}
}.then() => {
	$log => "Success";
}

jforeach i => list => {
}

jforeach key, val => map => {
}
<-|
|->
FunctionInstruction:
	Function (name="funcTest"):
	  -> Parameter:
	  -> Block {
	  	CustomFunction (name="log")
	  	  -> Arguments
	  	    -> "EHHSHHSH"
	  }
	Then:
	  -> Parameter:
	    -> String (name="test")
	  -> Block {
	  }

-> Then will only run if function run without problem and the then it has is accepting the right Arguments
-> If not, then it will not got to then

Sample:
jfunc funcTest(() -> {
	jreturn "TRUE";
}).then((jint test) -> {
|> another then if you want
}).then(() -> {

});
-> The then keywords or function will not run if return type is not same on args.
-> Also the then can be many times as you want
-> Will print : It RUN succesfully it return TRUE

<-|



|-> Switch statement

jwhile (condition) -> {
};

jfor (i -> 45) -> {
};
|> or this
jfor (jint i -> 45) -> {
};
|> second args need to be unsigned or not negative
|> start at 5 stop until it reach 45 with step 3
jfor (i -> 5, 45, 3) -> {
};

|> start at 5 stop until it reach -19 with step 2 reverse
jfor (jint i -> 5, -10, 2 -> reverse) -> {
};

jforeach (key, val -> map) -> {
};

jforeach (v -> vec) -> {
};

jswitch (test) -> {
	jcase '23' -> {
		$log -> "23";
	};
};

jinline jstatic jfunc verse(() -> {
	|> Will not show, so long
}).then.goto -> jonlyif (_checkVerse(jstring args) -> {jreturn args -> ($sameas -> "success"); } ) ->
(() -> { jreturn _testing._melodiatic -> (5 || 6) -> @__digits__ -> ($transpose -> @__semi__.automatically());
}).then.traverse(jstring __contextual) -> {
	|> I will not show, it so long
}.execute() => verse() -> with.Speed("1s");



jint    testInteger         = (test-45);
jdouble testDecimal         = .78;
jstring oneQoute            = 'test';
jstring doubleQoute         = "test";

jfunc testFunction(jstring stringParam) -> {
	jint test = 56;
	jreturn true;
};

jfunc testFunction((jstring stringParam) -> {
	jint test = 34;
});then(() -> {

});

jfunc testFunction((jstring stringParam) -> {
	jint test = 34;
}).then(() -> {
	$log -> "TTSTTST";
});

jint test = 34;


<-|